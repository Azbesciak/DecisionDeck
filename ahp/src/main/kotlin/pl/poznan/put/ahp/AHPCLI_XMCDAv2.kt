package pl.poznan.put.ahpimport org.xmcda.ProgramExecutionResultimport org.xmcda.XMCDAimport org.xmcda.converters.v2_v3.XMCDAConverter.*import org.xmcda.parsers.xml.xmcda_v2.XMCDAParserimport pl.poznan.put.xmcda.*import java.io.Fileobject AHPCLI_XMCDAv2 {    @Throws(InvalidCommandLineException::class)    @JvmStatic    fun main(args: Array<String>) {        // Parsing the options        val params = parseCmdLineArguments(args)        val indir = params.inputDirectory        val outdir = params.outputDirectory        val prgExecResults = File(outdir, "messages.xml")        prgExecResults.parentFile.mkdirs()        val executionResult = ProgramExecutionResult()        // The idea of the following code wrt. errors is to collect as many errors as possible before the        // computation takes place, to the user's benefit since he/she then gets all of them after a single call.        // this object is where the XMCDA objects will be put into.        val xmcda: XMCDA        // Load XMCDA v2.2.1 inputs        val xmcda_v2 = org.xmcda.v2.XMCDA()        loadXMCDAv2(xmcda_v2, File(indir, "alternatives.xml"), true,                executionResult, "alternatives")        loadXMCDAv2(xmcda_v2, File(indir, "criteria.xml"), true,                executionResult, "criteria")        loadXMCDAv2(xmcda_v2, File(indir, "hierarchy.xml"), true,                executionResult, "hierarchy")        loadXMCDAv2(xmcda_v2, File(indir, "criteria_comparisons.xml"), true,                executionResult, "criteriaComparisons")        loadXMCDAv2(xmcda_v2, File(indir, "preference.xml"), true,                executionResult, "alternativesComparisons")        // We have problems with the inputs, its time to stop        if (!(executionResult.isOk || executionResult.isWarning)) {            writeProgramExecutionResultsAndExit(prgExecResults, executionResult, XmcdaVersion.v2)            // previous statement terminates the execution        }        // Convert that to XMCDA v3        try {            xmcda = convertTo_v3(xmcda_v2)        } catch (t: Throwable) {            executionResult.addError(getMessage("Could not convert inputs to XMCDA v3, reason: ", t))            writeProgramExecutionResultsAndExit(prgExecResults, executionResult, XmcdaVersion.v2)            // previous statement terminates the execution            return  // just to make the compiler happy about xmcda being final and potentially not initialized below        }        // Let's check the inputs and convert them into our own structures        val result = try {            InputsHandler.checkAndExtractInputs(xmcda)        } catch (e: Throwable) {            executionResult += e            writeProgramExecutionResultsAndExit(prgExecResults, executionResult, XmcdaVersion.v3)            return        }        val xResults = AHPOutputsHandler.convert(result)        // and finally, write them onto the appropriate files        xResults.forEach { outputName, values ->            val outputFile = File(outdir, "$outputName.xml")            val resultsV2 = try {                 requireNotNull(convertTo_v2(values)) {                    "Conversion from v3 to v2 returned a null value"                }            } catch (t: Throwable) {                val err = "Could not convert $outputName into XMCDA_v2, reason: "                executionResult.addError(getMessage(err, t))                return@forEach            }            try {                XMCDAParser.writeXMCDA(resultsV2, outputFile, AHPOutputsHandler.xmcdaV2Tag(outputName))            } catch (t: Throwable) {                val err = "Error while writing $outputName.xml, reason: "                executionResult.addError(getMessage(err, t))                // Whatever the error is, clean up the file: we do not want to leave an empty or partially-written file                outputFile.delete()            }        }        writeProgramExecutionResultsAndExit(prgExecResults, executionResult, XmcdaVersion.v2)        // previous statement terminates the execution    }}
package pl.poznan.put.ahpimport org.xmcda.ProgramExecutionResultimport org.xmcda.XMCDAimport org.xmcda.parsers.xml.xmcda_v3.XMCDAParserimport pl.poznan.put.xmcda.*import java.io.Fileobject AHPCLI_XMCDAv3 {    @Throws(InvalidCommandLineException::class)    @JvmStatic    fun main(args: Array<String>) {        // Parsing the options        val params = parseCmdLineArguments(args)        val indir = params.inputDirectory        val outdir = params.outputDirectory        val prgExecResults = File(outdir, "messages.xml")        prgExecResults.parentFile.mkdirs()        val executionResult = ProgramExecutionResult()        val xmcda = XMCDA()        loadXMCDAv3(xmcda, File(indir, "alternatives.xml"), true,                executionResult, "alternatives")        loadXMCDAv3(xmcda, File(indir, "criteria.xml"), true,                executionResult, "criteria")        loadXMCDAv3(xmcda, File(indir, "hierarchy.xml"), true,                executionResult, "criteriaHierarchy")        loadXMCDAv3(xmcda, File(indir, "criteria_comparisons.xml"), true,                executionResult, "criteriaMatrix")        loadXMCDAv3(xmcda, File(indir, "preference.xml"), true,                executionResult, "alternativesMatrix")        if (!(executionResult.isOk || executionResult.isWarning)) {            writeProgramExecutionResultsAndExit(prgExecResults, executionResult, XmcdaVersion.v3)        }        val result = try {            InputsHandler.checkAndExtractInputs(xmcda)        } catch (t: Throwable) {            executionResult.addError(getMessage("Could not convert inputs to XMCDA v3, reason: ", t))            writeProgramExecutionResultsAndExit(prgExecResults, executionResult, XmcdaVersion.v3)            return        }        val xResults = AHPOutputsHandler.convert(result)        val parser = XMCDAParser()        xResults.forEach { key, values ->            val outputFile = File(outdir, "$key.xml")            try {                parser.writeXMCDA(values, outputFile, AHPOutputsHandler.xmcdaV3Tag(key))            } catch (throwable: Throwable) {                val err = "Error while writing $key.xml, reason: "                executionResult.addError(getMessage(err, throwable))                outputFile.delete()            }        }        writeProgramExecutionResultsAndExit(prgExecResults, executionResult, XmcdaVersion.v3)    }}